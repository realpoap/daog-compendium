/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BestiaryIndexImport } from './routes/bestiary/index'
import { Route as SpellsAddImport } from './routes/spells/add'
import { Route as SpellsIdImport } from './routes/spells/$id'
import { Route as BestiaryIdImport } from './routes/bestiary/$id'
import { Route as SpellsEditIdImport } from './routes/spells/edit/$id'

// Create Virtual Routes

const RulesLazyImport = createFileRoute('/rules')()
const IndexLazyImport = createFileRoute('/')()
const SpellsIndexLazyImport = createFileRoute('/spells/')()

// Create/Update Routes

const RulesLazyRoute = RulesLazyImport.update({
  id: '/rules',
  path: '/rules',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/rules.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SpellsIndexLazyRoute = SpellsIndexLazyImport.update({
  id: '/spells/',
  path: '/spells/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/spells/index.lazy').then((d) => d.Route))

const BestiaryIndexRoute = BestiaryIndexImport.update({
  id: '/bestiary/',
  path: '/bestiary/',
  getParentRoute: () => rootRoute,
} as any)

const SpellsAddRoute = SpellsAddImport.update({
  id: '/spells/add',
  path: '/spells/add',
  getParentRoute: () => rootRoute,
} as any)

const SpellsIdRoute = SpellsIdImport.update({
  id: '/spells/$id',
  path: '/spells/$id',
  getParentRoute: () => rootRoute,
} as any)

const BestiaryIdRoute = BestiaryIdImport.update({
  id: '/bestiary/$id',
  path: '/bestiary/$id',
  getParentRoute: () => rootRoute,
} as any)

const SpellsEditIdRoute = SpellsEditIdImport.update({
  id: '/spells/edit/$id',
  path: '/spells/edit/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/rules': {
      id: '/rules'
      path: '/rules'
      fullPath: '/rules'
      preLoaderRoute: typeof RulesLazyImport
      parentRoute: typeof rootRoute
    }
    '/bestiary/$id': {
      id: '/bestiary/$id'
      path: '/bestiary/$id'
      fullPath: '/bestiary/$id'
      preLoaderRoute: typeof BestiaryIdImport
      parentRoute: typeof rootRoute
    }
    '/spells/$id': {
      id: '/spells/$id'
      path: '/spells/$id'
      fullPath: '/spells/$id'
      preLoaderRoute: typeof SpellsIdImport
      parentRoute: typeof rootRoute
    }
    '/spells/add': {
      id: '/spells/add'
      path: '/spells/add'
      fullPath: '/spells/add'
      preLoaderRoute: typeof SpellsAddImport
      parentRoute: typeof rootRoute
    }
    '/bestiary/': {
      id: '/bestiary/'
      path: '/bestiary'
      fullPath: '/bestiary'
      preLoaderRoute: typeof BestiaryIndexImport
      parentRoute: typeof rootRoute
    }
    '/spells/': {
      id: '/spells/'
      path: '/spells'
      fullPath: '/spells'
      preLoaderRoute: typeof SpellsIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/spells/edit/$id': {
      id: '/spells/edit/$id'
      path: '/spells/edit/$id'
      fullPath: '/spells/edit/$id'
      preLoaderRoute: typeof SpellsEditIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/rules': typeof RulesLazyRoute
  '/bestiary/$id': typeof BestiaryIdRoute
  '/spells/$id': typeof SpellsIdRoute
  '/spells/add': typeof SpellsAddRoute
  '/bestiary': typeof BestiaryIndexRoute
  '/spells': typeof SpellsIndexLazyRoute
  '/spells/edit/$id': typeof SpellsEditIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/rules': typeof RulesLazyRoute
  '/bestiary/$id': typeof BestiaryIdRoute
  '/spells/$id': typeof SpellsIdRoute
  '/spells/add': typeof SpellsAddRoute
  '/bestiary': typeof BestiaryIndexRoute
  '/spells': typeof SpellsIndexLazyRoute
  '/spells/edit/$id': typeof SpellsEditIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/rules': typeof RulesLazyRoute
  '/bestiary/$id': typeof BestiaryIdRoute
  '/spells/$id': typeof SpellsIdRoute
  '/spells/add': typeof SpellsAddRoute
  '/bestiary/': typeof BestiaryIndexRoute
  '/spells/': typeof SpellsIndexLazyRoute
  '/spells/edit/$id': typeof SpellsEditIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rules'
    | '/bestiary/$id'
    | '/spells/$id'
    | '/spells/add'
    | '/bestiary'
    | '/spells'
    | '/spells/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rules'
    | '/bestiary/$id'
    | '/spells/$id'
    | '/spells/add'
    | '/bestiary'
    | '/spells'
    | '/spells/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/rules'
    | '/bestiary/$id'
    | '/spells/$id'
    | '/spells/add'
    | '/bestiary/'
    | '/spells/'
    | '/spells/edit/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  RulesLazyRoute: typeof RulesLazyRoute
  BestiaryIdRoute: typeof BestiaryIdRoute
  SpellsIdRoute: typeof SpellsIdRoute
  SpellsAddRoute: typeof SpellsAddRoute
  BestiaryIndexRoute: typeof BestiaryIndexRoute
  SpellsIndexLazyRoute: typeof SpellsIndexLazyRoute
  SpellsEditIdRoute: typeof SpellsEditIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  RulesLazyRoute: RulesLazyRoute,
  BestiaryIdRoute: BestiaryIdRoute,
  SpellsIdRoute: SpellsIdRoute,
  SpellsAddRoute: SpellsAddRoute,
  BestiaryIndexRoute: BestiaryIndexRoute,
  SpellsIndexLazyRoute: SpellsIndexLazyRoute,
  SpellsEditIdRoute: SpellsEditIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/rules",
        "/bestiary/$id",
        "/spells/$id",
        "/spells/add",
        "/bestiary/",
        "/spells/",
        "/spells/edit/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/rules": {
      "filePath": "rules.lazy.tsx"
    },
    "/bestiary/$id": {
      "filePath": "bestiary/$id.tsx"
    },
    "/spells/$id": {
      "filePath": "spells/$id.tsx"
    },
    "/spells/add": {
      "filePath": "spells/add.tsx"
    },
    "/bestiary/": {
      "filePath": "bestiary/index.tsx"
    },
    "/spells/": {
      "filePath": "spells/index.lazy.tsx"
    },
    "/spells/edit/$id": {
      "filePath": "spells/edit/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
