// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/lib/zod-prisma"
  useMultipleFiles = false
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String   @unique
  isOwner   Boolean  @default(false)
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now())
  characters  String[]
  campaigns  String[]

  @@unique([name, password, email])
}

enum Role {
  VIEWER
  EDITOR
  ADMIN
}

model Character {
  id String              @id @default(auto()) @map("_id") @db.ObjectId
  creator String?
  owner String?
  campaigns String?
  isDead  Boolean  @default(false)
  fullname        String              @unique
  //avatar  String?
  name  String
  surname         String?
  species String
  subspecies String?
  size            CreatureSize? @default(average)
  sizeBonus Int? @default(0)
  alignment       Alignment? @default(neutral)
  level Int @default(1)
  experience Int @default(0)
  createdAt       DateTime?           @default(now())
  updatedAt       DateTime? @updatedAt
  background          String?
  description     String?
  glory           Int @default(0)
  luck  Int @default(0)
  stats           StatProfil
  isBoss          Boolean            @default(false)
  isCaster        Boolean  @default(false)
  isPun      Boolean  @default(false)
  //magicDomain     SpellType[]
  health StatVariable?
  spirit  StatVariable?
  actionList      ActionList?
  attackType  String @default("STR")
  defenseType  String @default("AGI")
  initiative Int @default(0)
  initiativeBonus Int @default(0)
  attack          Int @default(0)
  attackBonus     Int @default(0)
  defense         Int @default(0)
  defenseBonus    Int @default(0)
  ranged          Int @default(0)
  rangedBonus     Int @default(0)
  armor           Int @default(0)
  armorClass      Int @default(0)
  perception      Int @default(0)
  perceptionBonus Int @default(0)
  discretion      Int @default(0)
  discretionBonus Int @default(0)
  magic           Int @default(0)
  exhaustion  Int @default(0)
  careers String[]
  skills  Skill[]
  feats Feat[]
  fighterType String?
  weight StatVariable
  weightBonus  Int @default(0)
  carryWeight  Int @default(0)
  weightClass Int @default(0)
}

type StatVariable {
  current Int @default(0)
  max Int @default(0)
}

model Campaigns {
  id    String              @id @default(auto()) @map("_id") @db.ObjectId
  name String
  difficulty  Difficulty?
  players String[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  nextSession DateTime?
  dm  String
  creator String
  active  Boolean? @default(false)
}

enum Difficulty {
  effortless
  natural
  easy
  tricky
  tough
  ambitious
  despairing
  insane
  infernal
}

type Carreer {
  current String
  master  String
  statBonus StatProfil
  skills  String[]
  dangerous Boolean?
  illegal Boolean?
  arcane  Boolean?
}

type Skill {
  name  String
  mastery String
  description String?
  playerLevel Int?
  playerPoints Int?
}

type Feat {
  name  String
  mastery String
  description String
  combatEffects String?
  travelEffects String?
  passive String?
  rank Int
  color String
}

model Creature {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  fullname        String              @unique
  name            String
  rank            String?
  isBoss          Boolean?            @default(false)
  isCaster        Boolean?            @default(false)
  isDead       Boolean?            @default(false)
  magicDomain     SpellType[]
  type            Type?
  habitat         HabitatType[]
  subtype         String?
  alignment       Alignment?
  size            CreatureSize?
  createdAt       DateTime?           @default(now())
  updatedAt       DateTime?           @updatedAt
  level           Int
  initiative      Int?
  attack          Int
  attackBonus     Int?
  defense         Int
  defenseBonus    Int?
  ranged          Int
  rangedBonus     Int?
  health          Int
  armor           Int?
  perception      Int
  perceptionBonus Int?
  discretion      Int?
  discretionBonus Int?
  magic           Int?
  spirit          Int?
  glory           Int?
  stats           StatProfil
  loot            CreatureItem[]
  scavenge        CreatureComponent[]
  actionList      ActionList
  attributes      CreatureAttribute[]
  flavor          String?
  description     String?
  actions         CreatureAction[]

  @@unique([attributes.name])
  @@unique([actions.name])
  @@unique([scavenge.name])
  @@unique([loot.id])
}

type CreatureAttribute {
  name        String
  flavor      String?
  description String?
}

model Attribute {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  flavor      String?
  description String?
}

enum HabitatType {
  any
  abyss
  coast
  canyon
  cave
  desert
  dungeon
  farm
  forest
  jungle
  lagoon
  mountain
  sea
  river
  ruin
  shrubland
  swamp
  toundra
  town
  volcano
}

enum Type {
  beast
  critter
  demon
  fae
  golem
  insect
  monster
  oddity
  person
  plant
  undead
  wyrm
}

enum Alignment {
  saint
  good
  neutral
  bad
  evil
}

type ActionList {
  main    Int  @default(1)
  limited Int? 
  free    Int? 
  travel  Int? 
  epic    Int  @default(0)
}

enum ActionTarget {
  single
  multiple
  random
  self
  terrain
  none
}

type CreatureAction {
  searchName  String
  name        String
  action      ActionType
  type        SpellAction
  flavor      String?
  description String?
  damages     String?
  effects     String?
  heal        String?
  target      ActionTarget
  range       String?
}

model Action {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  searchName  String       @unique
  name        String
  action      ActionType
  type        SpellAction
  flavor      String?
  description String?
  damages     String?
  effects     String?
  heal        String?
  target      ActionTarget
  range       String?
}

enum ActionType {
  main
  limited
  free
  travel
  epic
}

enum CreatureSize {
  tiny
  small
  average
  large
  huge
  gigantic
}

type StatProfil {
  CEL Int @default(15)
  AGI Int @default(15)
  DEX Int @default(15)
  STR Int @default(15)
  END Int @default(15)
  VIT Int @default(15)
  WIL Int @default(15)
  INS Int @default(15)
  SEN Int @default(15)
  CHA Int @default(15)
  SOC Int @default(15)
  ERU Int @default(15)
}

model Spell {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  number      Int           @unique
  titleGlaise String?       @unique
  titleCommon String        @unique
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  level       Int
  type        SpellType
  cost        Int
  difficulty  Int
  casting     SpellCasting?
  targetType  SpellTarget?
  action      SpellAction?
  flavor      String?
  description String
  damages     String?
  heal        String?
  effects     String?
  range       String?
  duration    String?
  target      String?
  components  String?
}

model Component {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  searchName  String  @unique
  name        String[]
  componentType String
  scienceName String @unique
  description String?
  weight      Float?
  value       Float?
  valueWeight Float?
  rarity      rarity @default(common)
  uses        componentUses
  isFood  Boolean?
  toxic Boolean @default(false)
  toxicity String?
  habitat HabitatType[]
}

type CreatureComponent {
id String
name String
quantity Int  @default(1)
}

type CreatureItem {
  id  String
  name String
  quantity   Int         @default(1)
}

type componentUses {
  ointment Boolean
  potion  Boolean
  extract Boolean
  catalyst Boolean
}

enum rarity {
  common
  unusual
  rare
  fabled
}

model Item {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  searchName      String @unique
  name            String[]
  itemType        ItemType
  material        String
  materialType    String
  materialSubType String?
  description     String?
  properties      String?
  isFood  Boolean? @default(false)
  //Merchant
  quality         qualityType     @default(common)
  weight          Float?
  value           Float?
  valueWeight     Float?
  constraints     StatProfil?
  maxDurability      Int? @default(1)
  durability      Int? @default(1)
  // Rarity
  magicWeight     Int?
  isRelic         Boolean? @default(false)
  rarity  rarity @default(common)
  //Weapon
  usage           String?
  damages         String?
  inflictType     String[]
  isCritical  Boolean?
  rangeType rangeType?
  range String?
  weaponType  weaponType?
  //Armor
  protection      Int?
  armorClass  armorClass? @default(none)
  resistType      String[]
  magicProtection Int?
}

enum armorClass {
  none
  light
  medium
  heavy
}

enum weaponType {
  finesse
  heavy
  versatile
}

enum ItemType {
  weapon
  armor
  shield
  garnment
  accessory
  trinket
  jewel
  potion
  ammunition
  food
  junk
  book
}

enum SpellType {
  mouflette
  beast
  nature
  scourge
  spirit
  death
  life
  earth
  fire
  water
  air
  blood
}

enum SpellAction {
  charm
  damage
  heal
  protect
  enhance
  link
  create
  transform
  move
  remove
  restrain
  puzzle
}

enum SpellCasting {
  instant
  delayed
  ritual
  concentration
  upkeep
}

enum SpellTarget {
  single
  multiple
  random
  self
  terrain
  none
}

enum rangeType {
  self
  close
  near
  far
  visible
}

enum qualityType {
  common
  poor
  great
  masterpiece
  legendary
}
